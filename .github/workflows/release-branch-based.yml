name: Release - Branch Based

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release Type (patch/minor/major)'
        required: true
        default: 'patch'
    branches:
      - master
      - 'release/*'

jobs:
  sanity-check:
    runs-on: ubuntu-latest
    outputs:
      is-valid: ${{ steps.check_branch.outputs.is-valid }}
    steps:
      - name: Check release type and branch
        id: check_branch
        run: |
          if [[ "${{ github.event.inputs.releaseType }}" == "patch" && "$GITHUB_REF" == refs/heads/release* ]]; then
            echo "::set-output name=is-valid::true"
          elif [[ "${{ github.event.inputs.releaseType }}" != "patch" && "$GITHUB_REF" == refs/heads/master ]]; then
            echo "::set-output name=is-valid::true"
          else
            echo "::set-output name=is-valid::false"
            echo "Release type and branch mismatch. Major/minor releases should be from master, patches from release branches."
            exit 1
          fi

  prepare-release:
    needs: sanity-check
    if: ${{ needs.sanity-check.outputs.is-valid == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.bump_version.outputs.version }}
      new-branch-name: ${{ steps.create_branch.outputs.new-branch-name }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install bump2version
        run: pip install bump2version

      - name: Configure Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Determine new version (dry run for major/minor)
        if: github.event.inputs.releaseType != 'patch'
        id: prep_version
        run: |
          VERSION=$(bump2version --dry-run --list ${{ github.event.inputs.releaseType }} --config-file ./setup.cfg | grep new_version= | sed -r 's/new_version=//')
          echo "New version: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Create release branch for major/minor releases
        if: github.event.inputs.releaseType != 'patch'
        id: create_branch
        run: |
          NEW_BRANCH_NAME="release-${{ steps.prep_version.outputs.version }}"
          git checkout -b ${NEW_BRANCH_NAME}
          echo "::set-output name=new-branch-name::$NEW_BRANCH_NAME"

      - name: Bump version and create tag
        id: bump_version
        run: |
          bump2version ${{ github.event.inputs.releaseType }} --config-file ./setup.cfg
          NEW_VERSION=$(grep 'current_version = ' ./setup.cfg | sed -r 's/current_version = //')
          echo "::set-output name=version::$NEW_VERSION"
          if [ "${{ github.event.inputs.releaseType }}" != "patch" ]; then
            git push --set-upstream origin ${{ steps.create_branch.outputs.new-branch-name }}
            git push origin ${{ steps.create_branch.outputs.new-branch-name }} --tags
          else
            git push origin --tags
            git push
          fi

      - name: Checkout master branch and merge release changes (for major/minor)
        if: github.ref == 'refs/heads/master' && github.event.inputs.releaseType != 'patch'
        run: |
          git checkout master
          git merge ${{ steps.create_branch.outputs.new-branch-name }} --no-ff --message "Merge release changes back into master"
          git push origin master

  build-and-push-docker:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Versioned Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: benmotevalli/test-release-pipeline-prod:${{ needs.prepare-release.outputs.new-version }}