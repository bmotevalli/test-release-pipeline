name: Release - Branch Based

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release Type (patch/minor/major)'
        required: true
        default: 'patch'
    branches:
      - master
      - 'release/*'

jobs:
  sanity-check:
    runs-on: ubuntu-latest
    outputs:
      is-valid: ${{ steps.check_branch.outputs.is-valid }}
    steps:
      - name: Check release type and branch
        id: check_branch
        run: |
          if [[ "${{ github.event.inputs.releaseType }}" == "patch" && "$GITHUB_REF" == *refs/heads/release* ]]; then
            echo "::set-output name=is-valid::true"
          elif [[ "${{ github.event.inputs.releaseType }}" != "patch" && "$GITHUB_REF" == refs/heads/master ]]; then
            echo "::set-output name=is-valid::true"
          else
            echo "::set-output name=is-valid::false"
            echo "Release type and branch mismatch. Major/minor releases should be from master, patches from release branches."
            exit 1

  prepare-major-minor-release:
    needs: sanity-check
    if: ${{ needs.sanity-check.outputs.is-valid == 'true' && github.event.inputs.releaseType != 'patch' }}
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.bump_version.outputs.version }}
      new-branch-name: ${{ steps.create_branch.outputs.new-branch-name }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install bump2version
        run: pip install bump2version

      - name: Configure Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Determine new version and create release branch
        id: create_branch
        run: |
          VERSION=$(bump2version --dry-run --list ${{ github.event.inputs.releaseType }} --config-file ./setup.cfg | grep new_version= | sed -r 's/new_version=//')
          NEW_BRANCH_NAME="release-${VERSION}"
          git checkout -b ${NEW_BRANCH_NAME}
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=new-branch-name::${NEW_BRANCH_NAME}"

      - name: Bump version and tag on release branch
        id: bump_version
        run: |
          bump2version ${{ github.event.inputs.releaseType }} --config-file ./setup.cfg
          git push --set-upstream origin ${{ steps.create_branch.outputs.new-branch-name }}
          git push origin ${{ steps.create_branch.outputs.new-branch-name }} --tags
      
      - name: Checkout master branch and merge release changes
        if: github.ref == 'refs/heads/master'
        run: |
          git checkout master
          git merge ${{ steps.create_branch.outputs.new-branch-name }} --no-ff --message "Merge release changes back into master"
          git push origin master

  prepare-patch-release:
    needs: sanity-check
    if: ${{ needs.sanity-check.outputs.is-valid == 'true' && github.event.inputs.releaseType == 'patch' }}
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.bump_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install bump2version
        run: pip install bump2version

      - name: Configure Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Bump version and tag for patch release
        id: bump_version
        run: |
          bump2version ${{ github.event.inputs.releaseType }} --config-file ./setup.cfg
          NEW_VERSION=$(grep 'current_version = ' ./setup.cfg | sed -r 's/current_version = //')
          echo "::set-output name=version::$NEW_VERSION"
          git push origin --tags
          git push

  build-and-push-docker:
    needs: [prepare-major-minor-release, prepare-patch-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Versioned Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: benmotevalli/test-release-pipeline-prod:${{ needs.prepare-major-minor-release.outputs.new-version || needs.prepare-patch-release.outputs.new-version }}




# name: Release - Branch Based

# on:
#   workflow_dispatch:
#     inputs:
#       releaseType:
#         description: 'Release Type (patch/minor/major)'
#         required: true
#         default: 'patch'
#     branches:
#       - master
#       - release/*

# jobs:
#   prepare-release:
#     runs-on: ubuntu-latest
#     outputs:
#       should-release: ${{ steps.check_branch.outputs.should-release }}
#       release-version: ${{ steps.bump_version.outputs.version }}
#       new-branch-name: ${{ steps.create_release_branch.outputs.new-branch-name }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#         with:
#           submodules: true
#           fetch-depth: 0 # Fetch all history for all tags and branches

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'

#       - name: Install bump2version
#         run: pip install bump2version

#       - name: Configure Git identity
#         run: |
#           git config --global user.name "GitHub Actions"
#           git config --global user.email "actions@github.com"

#       - name: Check if it's a patch release on a release branch
#         id: check_branch
#         run: |
#           if [[ "${{ github.event.inputs.releaseType }}" == "patch" && "$GITHUB_REF" == refs/heads/release* ]]; then
#             echo "::set-output name=should-release::true"
#           elif [[ "${{ github.event.inputs.releaseType }}" != "patch" && "$GITHUB_REF" == refs/heads/master ]]; then
#             echo "::set-output name=should-release::true"
#           else
#             echo "::set-output name=should-release::false"
#             echo "Release type and branch mismatch. Major/minor releases should be from master, patches from release branches."
#             exit 1
#           fi

#       - name: Bump version (dry run)
#         id: bump_version
#         if: steps.check_branch.outputs.should-release == 'true'
#         run: |
#           OUTPUT=$(bump2version ${{ github.event.inputs.releaseType }} --config-file ./setup.cfg --dry-run --list)
#           NEW_VERSION=$(echo "$OUTPUT" | grep 'new_version=' | sed -r 's/new_version=//')
#           echo "New version: $NEW_VERSION"
#           echo "::set-output name=version::$NEW_VERSION"

#       - name: Create release branch for major/minor releases and bump version
#         id: create_release_branch
#         if: github.ref == 'refs/heads/master' && (github.event.inputs.releaseType == 'major' || github.event.inputs.releaseType == 'minor')
#         run: |
#           NEW_BRANCH_NAME="release-${{ steps.bump_version.outputs.version }}"
#           git checkout -b $NEW_BRANCH_NAME
#           bump2version ${{ github.event.inputs.releaseType }} --config-file ./setup.cfg
#           git push -u origin $NEW_BRANCH_NAME
#           git push origin $NEW_BRANCH_NAME --tags
#           echo "::set-output name=new-branch-name::$NEW_BRANCH_NAME"
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   release:
#     needs: prepare-release
#     if: needs.prepare-release.outputs.should-release == 'true'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           submodules: true

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

#       - name: Build and Push Versioned Docker image
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           file: ./Dockerfile
#           push: true
#           tags: benmotevalli/test-release-pipeline-prod:${{ needs.prepare-release.outputs.release-version }}
